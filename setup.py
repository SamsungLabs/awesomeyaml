#!/usr/bin/env python

# Copyright 2022 Samsung Electronics Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from setuptools import setup, find_packages
from setuptools.command.build_py import build_py
from distutils.command.sdist import sdist

import importlib.util
from pathlib import Path

package_name = 'awesomeyaml'
description = 'Config-building utilities using YAML'
author = 'Łukasz Dudziak'
author_email = 'l.dudziak@samsung.com'
url = 'https://github.com/SamsungLabs/awesomeyaml'
download_url = 'https://github.com/SamsungLabs/awesomeyaml'
data_files = {}

version_file = Path(__file__).parent.joinpath(package_name, 'version.py')
spec = importlib.util.spec_from_file_location('{}.version'.format(package_name), version_file)
package_version = importlib.util.module_from_spec(spec)
spec.loader.exec_module(package_version)

long_desc = None
long_desc_type = None
readme_md = Path(__file__).parent.joinpath('README.md')
if readme_md.exists():
    data_files.setdefault('.', []).append(readme_md.name)
    with readme_md.open('r') as f:
        long_desc = f.read()
        long_desc_type = 'text/markdown'

license = Path(__file__).parent.joinpath('LICENSE')
if license.exists():
    data_files.setdefault('.', []).append(license.name)


class build_maybe_inplace(build_py):
    def run(self):
        _dist_file = version_file.parent.joinpath('_dist_info.py')
        _dist_file.write_text('\n'.join(map(lambda attr_name: attr_name+' = '+repr(getattr(package_version, attr_name)), package_version.__all__)) + '\n')
        ret = super().run()
        _dist_file.unlink()
        return ret


class sdist_maybe_inplace(sdist):
    def run(self):
        _dist_file = version_file.parent.joinpath('_dist_info.py')
        _dist_file.write_text('\n'.join(map(lambda attr_name: attr_name+' = '+repr(getattr(package_version, attr_name)), package_version.__all__)) + '\n')
        ret = super().run()
        _dist_file.unlink()
        manifest = Path(__file__).parent.joinpath('MANIFEST') # this is automatically generated by "python -m build" and not cleaned, at least at the moment of writing
        if manifest.exists():
            manifest.unlink()
        return ret


setup(name=package_name,
      version=package_version.version,
      description=description,
      author=author,
      author_email=author_email,
      url=url,
      download_url=download_url,
      long_description=long_desc,
      long_description_content_type=long_desc_type,
      python_requires='>=3.6.0',
      setup_requires=[
          'GitPython'
      ],
      install_requires=[
          'pyyaml >= 5.1'
      ],
      packages=find_packages(where='.', exclude=['tests']),
      data_files=list(data_files.items()),
      package_dir={ '': '.' },
      cmdclass={
          'build_py': build_maybe_inplace,
          'sdist': sdist_maybe_inplace
      }
)
